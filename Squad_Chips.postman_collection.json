{
	"info": {
		"_postman_id": "7af754ed-7766-4a8e-a0d7-1676ba24f52f",
		"name": "Squad_Chips",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30984369",
		"_collection_link": "https://planetary-resonance-915517.postman.co/workspace/Chips-QAcoders~ae7c4149-5ab5-4633-861c-a866f0c4374c/collection/30984369-7af754ed-7766-4a8e-a0d7-1676ba24f52f?action=share&source=collection_link&creator=30984369"
	},
	"item": [
		{
			"name": "AUTH",
			"item": [
				{
					"name": "Cadastro Qa Coders",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://chips.qacoders-academy.com.br/api/login/",
							"protocol": "https",
							"host": [
								"chips",
								"qacoders-academy",
								"com",
								"br"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro Qa Coders Copy",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenQA}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"checkToken\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/validateToken",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"validateToken"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "USERS",
			"item": [
				{
					"name": "Novo Cadastro",
					"item": [
						{
							"name": "Novo cadastro - Com Sucesso Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"userId\", JSON.parse(responseBody)._id);\r",
											" \r",
											" \r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"url\")}/api/user/${pm.environment.get(\"userId\")}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": `${pm.environment.get(\"tokenQA\")}`\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    try {\r",
											"        pm.expect(response.json()).exist;\r",
											"        testResult = true;\r",
											"    } catch(error) {\r",
											"        testResult = false;\r",
											"        pm.test(\"Create user\", function () {\r",
											"            pm.expect(true).to.eql(testResult);\r",
											"        });\r",
											"    }\r",
											"               \r",
											"    if (testResult !== false) {\r",
											"        pm.test(\"User created and saved in the database.\", function () {\r",
											"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
											"        });\r",
											"      \r",
											"        pm.test(\"Status code is 201\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											" \r",
											"       \r",
											"    }\r",
											"});\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Lorenna\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin User com  Sucesso Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check Token is True\", function (){\r",
											"    pm.expect(JSON.parse(responseBody).token).exist\r",
											"    \r",
											"});\r",
											"pm.environment.set(\"tokenUsers\", pm.variables.replaceIn(JSON.parse(responseBody).token));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Acesso Negado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Livia\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  CPF em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"O campo CPF é obrigatório!\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorCPFrequerid\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  Confirmação de Senha  dif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"As senhas não coincidem.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordWrong\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"E123@bcd3\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"123456\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  Confirmação de Senha   em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"O campo de confirmação de senha é obrigatório.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordEmpty1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  CPF-com mais 11 digitos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Deve preencher o CPF com 11 dígitos\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorCPF11\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"123456789199\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  CPF-com menos 11 digitos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\" Deve preencher o CPF com 11 dígitos\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorCPF-11\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"1234567\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  CPF-ja Cadastrado-409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O cpf informado já existe em nossa base de dados.\", function (){\r",
											"    pm.expect(pm.globals.get(\"AlertCpfCadast\")).to.eql(JSON.parse(responseBody).alert[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Thiago Siqueira\",\r\n  \"mail\": \"Thiago_cabf20ce-2fe4-42a1-a5d7-e860e7d1091e@hotmail.com\",\r\n  \"password\": \"NDQ8CA$UNLTp\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"94759281894\",\r\n  \"confirmPassword\": \"NDQ8CA$UNLTp\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  E-mail com dominio errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorEmailDominio\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"zorro@1234\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  E-mail  em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo e-mail é obrigatório.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorEmailRequest\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  E-mail   ja Cadastrado-409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"E-mail já cadastrado.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"alertEmailCadast\")).to.eql(JSON.parse(responseBody).alert[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"Flavia_3a682756-ae2e-4a37-882c-031a8e4e8596@outlook.com\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"38163580047\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  Nome  com + 100 carcteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O nome completo deve ter no máximo 100 caracteres.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac100\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"Maria Eduarda da Silva Santos Oliveira de Almeida Pereira Costa Rodrigues Andrade Fernandes Oliveira Martins Pinto Ribeiro Pereira Santos Almeida Silva Sousa Lima Gonçalves Vieira Carvalho Martins Pereira Costa Fernandes Santos Oliveira da Silva Rodrigues Almeida Andrade Costa Pereira Oliveira Santos Silva Oliveira Andrade Lima\",\r\n    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  Nome  com numeros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo nome completo não deve conter números\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"Maria1 Pessoa\"\r\n,    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  Nome  com Carcter  especial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac2\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"Mari@ Pesso@\"\r\n,    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -  Nome  com em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo nome completo é obrigatório.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameRequerid\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"\"\r\n,    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Nome.Sobrenome obrigatorio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"erroraSurnameRequerid1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"Maria\"\r\n,    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -Acess  Em  Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo perfil de acesso é obrigatório.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"erroraProfileRequerid\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"{{FullName}}\"\r\n,    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -Acess  incorreto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo perfil de acesso deve ser preenchido de acordo com o seu cargo exemplo: ADMIN.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorAProfileIncorret\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\":\"{{FullName}}\"\r\n,    \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"FINAN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro -Senha com +12 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Livia\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"Laisesther@12\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"Laisesther@12\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Senha em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Campo senha é obrigatório\",\r",
											"        \"O campo de confirmação de senha não pode ficar vazio.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPassWordR\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Senha com -8 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Livia\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"Lais@12\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"Laise@12\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Senha sem Letras Maiuscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"abc@1234\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"abc@1234\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Senha sem Letras Minuscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"ABC@1234\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"ABC@1234\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Senha Só com Caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"@@@@@@@@\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"@@@@@@@@\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Senha Só com numeros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"1234567@\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"1234567@\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Mostrar usuario com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar se a contagem retornada é igual à contagem esperada\", function() {\r",
											"    // Obter a contagem esperada armazenada na variável de ambiente\r",
											"    var expectedCount = pm.environment.get(\"expectedCount\");\r",
											"});\r",
											"var template = `\r",
											"<style type=\"text/css\">\r",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
											"    .tftable tr {background-color:#ffffff;}\r",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
											"    .tftable tr:hover {background-color:#e0ffff;}\r",
											"</style>\r",
											"\r",
											"<table class=\"tftable\" border=\"1\">\r",
											"    <tr>\r",
											"        <th>ID</th>\r",
											"        <th>Full Name</th>\r",
											"        <th>Email</th>\r",
											"        <th>Password</th>\r",
											"        <th>Access Profile</th>\r",
											"        <th>CPF</th>\r",
											"        <th>Status</th>\r",
											"        <th>Registered By</th>\r",
											"        <th>Registration Date</th>\r",
											"        <th>Registration Number</th>\r",
											"    </tr>\r",
											"    \r",
											"    {{#each response}}\r",
											"        <tr>\r",
											"            <td>{{_id}}</td>\r",
											"            <td>{{fullName}}</td>\r",
											"            <td>{{mail}}</td>\r",
											"            <td>{{password}}</td>\r",
											"            <td>{{accessProfile}}</td>\r",
											"            <td>{{cpf}}</td>\r",
											"            <td>{{status}}</td>\r",
											"            <td>{{audit.[0].registeredBy.userLogin}}</td>\r",
											"            <td>{{audit.[0].registrationDate}}</td>\r",
											"            <td>{{audit.[0].registrationNumber}}</td>\r",
											"        </tr>\r",
											"    {{/each}}\r",
											"</table>\r",
											"`;\r",
											"\r",
											"function constructVisualizerPayload() {\r",
											"    return {response: pm.response.json()}\r",
											"}\r",
											"\r",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"users\": \"Retorna uma lista de usuários.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Com Sucesso Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"userId\", JSON.parse(responseBody)._id);\r",
											" \r",
											" \r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"url\")}/api/user/${pm.environment.get(\"userId\")}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": `${pm.environment.get(\"tokenQA\")}`\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    try {\r",
											"        pm.expect(response.json()).exist;\r",
											"        testResult = true;\r",
											"    } catch(error) {\r",
											"        testResult = false;\r",
											"        pm.test(\"Create user\", function () {\r",
											"            pm.expect(true).to.eql(testResult);\r",
											"        });\r",
											"    }\r",
											"               \r",
											"    if (testResult !== false) {\r",
											"        pm.test(\"User created and saved in the database.\", function () {\r",
											"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
											"        });\r",
											"      \r",
											"        pm.test(\"Status code is 201\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											" \r",
											"       \r",
											"    }\r",
											"});\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Lorenna\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin User com  Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check Token is True\", function (){\r",
											"    pm.expect(JSON.parse(responseBody).token).exist\r",
											"    \r",
											"});\r",
											"pm.environment.set(\"tokenUsers\", pm.variables.replaceIn(JSON.parse(responseBody).token));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin  campo Email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"TesteEtmo@com.br\",\r\n  \"password\": \"{{PassWord}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin  campo Email em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"O campo e-mail é obrigatório.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorEmailRequest\")).to.eql(JSON.parse(responseBody).mail)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"{{PassWord}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin  Senha em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Os dados informados são inválidos\", function (){\r",
											"    pm.expect(pm.globals.get(\"mailin\")).to.eql(JSON.parse(responseBody).password)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin  campo Senhas invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Os dados informados são inválidos\", function (){\r",
											"    pm.expect(pm.globals.get(\"alertAuthInvalid1\")).to.eql(JSON.parse(responseBody).alert)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"Teste@01\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contar Usuario",
					"item": [
						{
							"name": "Contar Usuario  com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar se a contagem retornada é igual à contagem esperada\", function() {\r",
											"    // Obter a contagem esperada armazenada na variável de ambiente\r",
											"    var expectedCount = pm.environment.get(\"expectedCount\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/user/count",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar Usuario Acesso Negado 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\" No token provided.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorsNoTokenProvided\")).to.eql(JSON.parse(responseBody).errors[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/user/count",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar Usuario Acesso  Erro  Interno  do Servidor 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Erro interno\",function(){\r",
											"    pm.expect(pm.globals.get(\"msg Acesso negado\")).to.eql(JSON.parse(responseBody).msg);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/user/coun",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"coun"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar Usuario  com sucesso por Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" pm.test(\"true\", function () {\r",
											"     var responseJSON = pm.response.json();\r",
											"     pm.expect(responseJSON.status).to.equal(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/65ddeffe62c4338de3caa6b4",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"65ddeffe62c4338de3caa6b4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar Usuario  Usuario não existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Esse usuário não existe em nossa base de dados.\", function (){\r",
											"    pm.expect(pm.globals.get(\"AlertUsuarioexist\")).to.eql(JSON.parse(responseBody).alert[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/65eb3e744a8524cdc26c7dc7",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"65eb3e744a8524cdc26c7dc7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar Usuario  id  Acesso negado 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Failed to authenticate token.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorsNoTokeFailed\")).to.eql(JSON.parse(responseBody).errors[0])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contar Usuario  id Erro interno 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Erro interno\",function(){\r",
											"    pm.expect(pm.globals.get(\"msg Acesso negado\")).to.eql(JSON.parse(responseBody).msg);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Editar Cadastro",
					"item": [
						{
							"name": "Novo cadastro - Com Sucesso Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"randomID\", JSON.parse(responseBody)._id);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"url\")}/api/user/${pm.environment.get(\"randomID\")}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": `${pm.environment.get(\"token\")}`\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    try {\r",
											"        pm.expect(response.json()).exist;\r",
											"        testResult = true;\r",
											"    } catch(error) {\r",
											"        testResult = false;\r",
											"        pm.test(\"Create user\", function () {\r",
											"            pm.expect(true).to.eql(testResult);\r",
											"        });\r",
											"    }\r",
											"               \r",
											"    if (testResult !== false) {\r",
											"        pm.test(\"User created and saved in the database.\", function () {\r",
											"            pm.expect(pm.environment.get(\"randomID\")).to.eql(response.json()._id);\r",
											"        });\r",
											"        pm.test(\"Status fullName is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"fullName\")).to.eql(response.json().fullName);\r",
											"        });\r",
											"        pm.test(\"Status email is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"email\")).to.eql(response.json().mail);\r",
											"        });\r",
											"        pm.test(\"Status cpf is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"cpf\")).to.eql(response.json().cpf);\r",
											"        });\r",
											"        pm.test(\"Status code is 201\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											"\r",
											"           // Obtém o ID do usuário criado\r",
											"        var responseBody = pm.response.json();\r",
											"        var randomID = responseBody.user._id;\r",
											" \r",
											"        // Salva o ID do usuário na variável de ambiente\r",
											"        pm.environment.set(\"randomID\", randomID);\r",
											" \r",
											"       \r",
											"    }\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Lorenna\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin User com  Sucesso Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check Token is True\", function (){\r",
											"    pm.expect(JSON.parse(responseBody).token).exist\r",
											"    \r",
											"});\r",
											"pm.environment.set(\"tokenUsers\", pm.variables.replaceIn(JSON.parse(responseBody).token));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Novo cadastro - Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"userId\", JSON.parse(responseBody)._id);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"url\")}/api/user/${pm.environment.get(\"userId\")}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": `${pm.environment.get(\"token\")}`\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    try {\r",
											"        pm.expect(response.json()).exist;\r",
											"        testResult = true;\r",
											"    } catch(error) {\r",
											"        testResult = false;\r",
											"        pm.test(\"Create user\", function () {\r",
											"            pm.expect(true).to.eql(testResult);\r",
											"        });\r",
											"    }\r",
											"               \r",
											"    if (testResult !== false) {\r",
											"        pm.test(\"User created and saved in the database.\", function () {\r",
											"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
											"        });\r",
											"        pm.test(\"Status fullName is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"fullName\")).to.eql(response.json().fullName);\r",
											"        });\r",
											"        pm.test(\"Status email is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"email\")).to.eql(response.json().mail);\r",
											"        });\r",
											"        pm.test(\"Status cpf is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"cpf\")).to.eql(response.json().cpf);\r",
											"        });\r",
											"        pm.test(\"Status code is 201\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											" \r",
											"        // Obtém o ID do usuário criado\r",
											"        var responseBody = pm.response.json();\r",
											"        var userId = responseBody.user._id;\r",
											" \r",
											"        // Salva o ID do usuário na variável de ambiente\r",
											"        pm.environment.set(\"userId\", userId);\r",
											"    }\r",
											"});\r",
											" \r",
											"\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Lorenna\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Teste para validar a mensagem \"Dados atualizados com sucesso!\" no responseBody\r",
											"pm.test(\"Validar mensagem de sucesso\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Dados atualizados com sucesso!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Lorenna\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Senha com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Teste para validar a mensagem \"Dados atualizados com sucesso!\" no responseBody\r",
											"pm.test(\"Senha atualizada com sucesso!\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Senha atualizada com sucesso!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/65ddeffe62c4338de3caa6b4",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"65ddeffe62c4338de3caa6b4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar   Status  de Usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status do usuario atualizado com sucesso para status false.\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Status do usuario atualizado com sucesso para status false.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/status/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar   Status  id ñ existente 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/status/65eb8bc34a8524cdc26d2323",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"65eb8bc34a8524cdc26d2323"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Confirmar Senha em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"O campo de confirmação de senha é obrigatório.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordEmpty1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"confirmPassword\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Email com espaço entre dominio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorMailBad\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"test @ test.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Email com Formato invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorMailBad\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"test@testcom\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Email  em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"O campo e-mail é obrigatório.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorEmailRequest\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome +100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O nome completo deve ter no máximo 100 caracteres.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac100\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"Maria Eduarda da Silva Santos Oliveira de Almeida Pereira Costa Rodrigues Andrade Fernandes Oliveira Martins Pinto Ribeiro Pereira Santos Almeida Silva Sousa Lima Gonçalves Vieira Carvalho Martins Pereira Costa Fernandes Santos Oliveira da Silva Rodrigues Almeida Andrade Costa Pereira Oliveira Santos Silva Oliveira Andrade Lima\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome  com Carac Especial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac2\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"Mari@\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{randomID}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{randomID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome com Iniciais MInus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac2\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"maria jose\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome com  Numeros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo nome completo não deve conter números\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"M4r14 J053\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"O campo nome completo é obrigatório.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameRequerid\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar  Nome s/Sobrenome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorNameCarac2\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"    });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"Maria\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha com +12 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Livia\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"password\": \"Laisesther@13\",\r\n  \"confirmPassword\": \"Laisesther@13\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha com -8 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Invalid value\",\r",
											"        \"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-16.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond1\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Livia\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Lais@12\",\r\n  \"confirmPassword\": \"Lais@12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Campo senha é obrigatório\",\r",
											"        \"O campo de confirmação de senha não pode ficar vazio.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPassWordR\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"{{PassWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha Só com Caracteres especiais Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Invalid value\",\r",
											"        \"As senhas não coincidem.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPasswordCond2\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"#########\",\r\n  \"confirmPassword\": \"########\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha sem Letras Maiuscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Invalid value\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorInvalidValue\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"abc@1234\",\r\n  \"confirmPassword\": \"abc@1234\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha sem Letras Minuscula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Invalid value\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorInvalidValue\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"password\": \"ABC@1234\",\r\n  \"confirmPassword\": \"ABC@1234\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha sem Numeros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Invalid value\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorInvalidValue\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"password\": \"ABC@esther\",\r\n  \"confirmPassword\": \"ABC@esther\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha diferentes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"        \r",
											"pm.test(\"Invalid value\",\r",
											"        \"As senhas não coincidem.\"\r",
											"    , function (){\r",
											"    pm.expect(pm.globals.get(\"errorPassWI\")).to.eql(JSON.parse(responseBody).error[0])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"password\": \"{{PassWord}}\",\r\n  \"confirmPassword\": \"ABC@1234\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Nome e Email 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"  pm.test(\"Failed to authenticate token.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorsNoTokeFailed\")).to.eql(JSON.parse(responseBody).errors[0])\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Nome  e Email -500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Erro interno\",function(){\r",
											"    pm.expect(pm.globals.get(\"msg Acesso negado\")).to.eql(JSON.parse(responseBody).msg);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/{{userId}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"{{userId}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha  403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Failed to authenticate token.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorsNoTokeFailed\")).to.eql(JSON.parse(responseBody).errors[0])\r",
											"});\r",
											"        \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{PassWord}}\",\r\n  \"confirmPassword\": \"{{PassWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Senha  500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Erro interno\",function(){\r",
											"    pm.expect(pm.globals.get(\"msg Acesso negado\")).to.eql(JSON.parse(responseBody).msg);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{PassWord}}\",\r\n  \"confirmPassword\": \"{{PassWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Status 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Failed to authenticate token.\", function (){\r",
											"    pm.expect(pm.globals.get(\"errorsNoTokeFailed\")).to.eql(JSON.parse(responseBody).errors[0])\r",
											"});\r",
											"        \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/status/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Status 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Erro interno\",function(){\r",
											"    pm.expect(pm.globals.get(\"msg Acesso negado\")).to.eql(JSON.parse(responseBody).msg);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/{{userId}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{userId}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar- Status 400-Usuario não Existe no Banco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Esse usuário não existe em nossa base de dados.\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Esse usuário não existe em nossa base de dados.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/password/65eb8bc34a8524cdc26d2321",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"65eb8bc34a8524cdc26d2321"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Novo cadastro - Com Sucesso Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"userId\", JSON.parse(responseBody)._id);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${pm.environment.get(\"url\")}/api/user/${pm.environment.get(\"userId\")}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        \"Authorization\": `${pm.environment.get(\"token\")}`\r",
											"    }\r",
											"}, function (err, response) {\r",
											"    try {\r",
											"        pm.expect(response.json()).exist;\r",
											"        testResult = true;\r",
											"    } catch(error) {\r",
											"        testResult = false;\r",
											"        pm.test(\"Create user\", function () {\r",
											"            pm.expect(true).to.eql(testResult);\r",
											"        });\r",
											"    }\r",
											"               \r",
											"    if (testResult !== false) {\r",
											"        pm.test(\"User created and saved in the database.\", function () {\r",
											"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
											"        });\r",
											"        pm.test(\"Status fullName is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"fullName\")).to.eql(response.json().fullName);\r",
											"        });\r",
											"        pm.test(\"Status email is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"email\")).to.eql(response.json().mail);\r",
											"        });\r",
											"        pm.test(\"Status cpf is true\", function () {\r",
											"            pm.expect(pm.environment.get(\"cpf\")).to.eql(response.json().cpf);\r",
											"        });\r",
											"        pm.test(\"Status code is 201\", function () {\r",
											"            pm.response.to.have.status(201);\r",
											"        });\r",
											" \r",
											"        // Obtém o ID do usuário criado\r",
											"        var responseBody = pm.response.json();\r",
											"        var userId = responseBody.user._id;\r",
											" \r",
											"        // Salva o ID do usuário na variável de ambiente\r",
											"        pm.environment.set(\"userId\", userId);\r",
											"    }\r",
											"});\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstName() {\r",
											"\r",
											"let firstName =[\"Ana\", \"Joao\", \"Pedro\", \"Mariana\", \"Lucas\", \"Carolina\", \"Gabriel\", \"Juliana\", \"Fernando\", \"Amanda\", \"Rafael\", \"Patricia\", \"Marcelo\", \"Laura\", \"Vinicius\", \"Camila\", \"Bruno\", \"Isabela\", \"Gustavo\", \"Larissa\", \"Rodrigo\", \"Vanessa\", \"Daniel\", \"Beatriz\", \"Matheus\", \"Carla\", \"Diego\", \"Bianca\", \"Paulo\", \"Tatiane\", \"Caio\", \"Natalia\", \"Leonardo\", \"Fernanda\", \"Ricardo\", \"Caroline\", \"Renan\", \"Aline\", \"Thiago\", \"Debora\", \"Felipe\", \"Priscila\", \"Jose\", \"Julia\", \"Luiz\", \"Nathalia\", \"Andre\", \"Erica\", \"Guilherme\", \"Luana\", \"Marcio\", \"Sara\", \"Eduardo\", \"Raquel\", \"Luciano\", \"Leticia\", \"Rafaela\", \"AnaPaula\", \"Paula\", \"Renata\", \"Cristiane\", \"Marcela\", \"Leandro\", \"Luisa\", \"Luciana\", \"Milton\", \"Cristina\", \"Rita\", \"Simone\", \"Regina\", \"Elaine\", \"Valeria\", \"Rogerio\", \"Sandra\", \"Viviane\", \"Camila\", \"Livia\", \"Flavia\", \"Igor\", \"Patricia\", \"Rosana\", \"Adriana\", \"Vinicius\", \"Jessica\", \"Roberto\", \"Lais\", \"Silvana\", \"Fabio\", \"Elaine\", \"Thais\", \"Leila\", \"Eliane\", \"Alessandra\", \"Douglas\", \"Mirella\", \"Roberta\", \"Marina\", \"Carlos\", \"Mario\", \"Larissa\", \"Mariana\", \"Jessica\", \"Amanda\", \"Eduarda\", \"Taina\", \"Tiago\", \"Joana\", \"Davi\", \"Silvani\", \"Luciana\", \"Cecilia\", \"Thales\", \"Adriano\", \"Isadora\", \"Camilo\", \"Gabriela\", \"Patricia\", \"Mara\", \"AnaLuiza\", \"JoaoPedro\", \"Lorena\", \"Talita\", \"Heloisa\", \"Isaac\", \"Leticia\", \"Carla\", \"Lucia\", \"Beatriz\", \"Janaina\", \"Mateus\", \"Yasmin\", \"Erick\", \"Giovanna\", \"Ricardo\", \"Karine\", \"Jaqueline\", \"Raissa\", \"Henrique\", \"Lilian\", \"Alexandre\", \"Renata\", \"AnaClara\", \"Priscilla\", \"LuizFelipe\", \"Luiza\", \"Debora\", \"Fabiana\", \"Thamires\", \"Cleiton\", \"Vinicius\", \"Fernanda\", \"Cintia\", \"Thais\", \"Francisco\", \"Patricia\", \"Guilherme\", \"Priscila\", \"Alessandro\", \"Brenda\", \"Daniele\", \"Renato\", \"Luana\", \"Sandra\", \"Eliana\", \"Lucas\", \"Marcela\", \"Michele\", \"Pamela\", \"Felipe\", \"Luiza\", \"Mariana\", \"Thiago\", \"Marta\", \"Bruno\", \"Tatiana\", \"Victor\", \"Lara\", \"Sabrina\", \"Robson\", \"Cristiane\", \"Cassio\", \"Vanessa\", \"Raquel\", \"Pedro\", \"Denise\", \"Carla\", \"Marcelo\", \"Luciana\", \"Adriane\", \"Catarina\", \"Renati\", \"Tatiane\", \"Mauricio\", \"Leila\", \"Antonio\", \"Mayara\", \"Lucas\", \"Melissa\", \"Felipe\", \"Bianca\", \"Lucas\", \"AnaBeatriz\", \"Yara\", \"Giovani\", \"Julia\", \"Mariana\", \"Rafaela\", \"Paulo\", \"Sonia\", \"Lucas\", \"Tais\", \"Rodrigo\", \"Isabel\", \"Fabio\", \"Lorenna\", \"Breno\", \"Julia\", \"Joaquim\", \"Pamela\", \"Luan\", \"Kamila\", \"Matheus\", \"Rafaela\"];\r",
											"\r",
											"let randomItem = firstName[Math.floor(Math.random()*firstName.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"FirstName\",firstName());\r",
											"\r",
											"\r",
											"function lastName() {\r",
											"\r",
											"let lastName =[\"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Pereira\", \"Costa\", \"Carvalho\", \"Almeida\", \"Ferreira\", \"Rodrigues\", \"Martins\", \"Rocha\", \"Andrade\", \"Pinto\", \"Nunes\", \"Cunha\", \"Barbosa\", \"Ribeiro\", \"Alves\", \"Monteiro\", \"Mendes\", \"Barros\", \"Farias\", \"Gomes\", \"Lima\", \"Araújo\", \"Fernandes\", \"Campos\", \"Carneiro\", \"Cardoso\", \"Gonçalves\", \"Correia\", \"Vieira\", \"Freitas\", \"Moura\", \"Mello\", \"Moreira\", \"Cavalcanti\", \"Castro\", \"Lopes\", \"Macedo\", \"Dias\", \"Siqueira\", \"Teixeira\", \"Borges\", \"Azevedo\", \"Pereira\", \"Cavalcante\", \"Mota\", \"Barros\", \"Santana\", \"Moraes\", \"Dantas\", \"Lira\", \"Bezerra\", \"Garcia\", \"Schmidt\", \"Tavares\", \"Aguiar\", \"Lira\", \"Vargas\", \"Camargo\", \"Figueiredo\", \"Brito\", \"Oliveira\", \"Siqueira\", \"Medeiros\", \"Freire\", \"Caldeira\", \"Abreu\", \"Nascimento\", \"Leite\", \"Viana\", \"Ramos\", \"Leão\", \"Pires\", \"Muniz\", \"Braga\", \"Serra\", \"Marques\", \"Morais\", \"Dutra\", \"Dantas\", \"Pacheco\", \"Bandeira\", \"Quaresma\", \"Silveira\", \"Borges\", \"Peixoto\", \"Machado\", \"Diniz\", \"Sobral\", \"Goulart\", \"Novais\", \"César\", \"Cortês\", \"Fonseca\", \"Clemente\", \"Godoy\", \"Mendes\", \"Domingues\", \"Xavier\", \"Lacerda\", \"Nogueira\", \"Fogaça\", \"Albuquerque\", \"Guimarães\", \"Lima\", \"Coutinho\", \"Baptista\", \"Pontes\", \"Costa\", \"Vasconcelos\", \"Torres\", \"Santana\", \"Aguiar\", \"Miranda\", \"Dantas\", \"Rocha\", \"Castro\", \"Almeida\", \"Silva\", \"Lima\", \"Cunha\", \"Barros\", \"Correia\", \"Santos\", \"Macedo\", \"Moraes\", \"Gomes\", \"Dias\", \"Freitas\", \"Carvalho\", \"Nunes\", \"Alves\", \"Andrade\", \"Ramos\", \"Pereira\", \"Fernandes\", \"Teixeira\", \"Araújo\", \"Oliveira\", \"Monteiro\", \"Ferreira\", \"Martins\", \"Rodrigues\", \"Farias\", \"Vieira\", \"Gonçalves\", \"Pinto\", \"Costa\", \"Ribeiro\", \"Cardoso\", \"Brito\", \"Correia\", \"Lopes\", \"Sousa\", \"Melo\", \"Cavalcanti\", \"Lira\", \"Bezerra\", \"Bandeira\", \"Pacheco\", \"Medeiros\", \"Siqueira\", \"Muniz\", \"Motta\", \"Peixoto\", \"Diniz\", \"Couto\", \"Moraes\", \"Pinto\", \"Silva\", \"Carvalho\", \"Costa\", \"Vasconcelos\", \"Gomes\", \"Andrade\", \"Correia\", \"Araújo\", \"Martins\", \"Barros\", \"Dantas\", \"Ferreira\", \"Nascimento\", \"Oliveira\", \"Pereira\", \"Rocha\", \"Cavalcante\", \"Pacheco\", \"Sousa\", \"Fogaça\", \"Ramos\", \"Leite\", \"Tavares\", \"Monteiro\", \"Bandeira\", \"Barbosa\", \"Lima\", \"Almeida\", \"Garcia\", \"Nogueira\", \"Albuquerque\", \"Fonseca\", \"Lopes\", \"Cunha\", \"Correia\", \"Siqueira\", \"Gonçalves\", \"Silveira\", \"Ribeiro\", \"Cavalcanti\", \"Moraes\", \"Freire\", \"Campos\", \"Ferreira\", \"Araújo\", \"Medeiros\", \"Macedo\", \"Carvalho\", \"Barros\", \"Oliveira\", \"Mendes\", \"Rocha\", \"Lira\", \"Gomes\", \"Andrade\", \"Muniz\", \"Rodrigues\", \"Monteiro\", \"Teixeira\", \"Martins\", \"Costa\", \"Pinto\", \"Araújo\", \"Sousa\", \"Lopes\", \"Moraes\", \"Almeida\", \"Ramos\", \"Santos\", \"Nunes\", \"Dias\", \"Pereira\", \"Gonçalves\", \"Lima\", \"Garcia\", \"Siqueira\", \"Oliveira\", \"Martins\", \"Rocha\", \"Monteiro\", \"Ferreira\", \"Mendes\", \"Dias\", \"Carvalho\", \"Pinto\", \"Andrade\", \"Lopes\", \"Nascimento\", \"Barbosa\", \"Correia\", \"Cavalcanti\", \"Gomes\", \"Freire\", \"Sousa\", \"Silveira\", \"Vieira\", \"Melo\", \"Ribeiro\", \"Borges\", \"Pacheco\", \"Moraes\", \"Cunha\", \"Santana\", \"Dantas\", \"Ramos\", \"Alves\", \"Gonçalves\", \"Farias\", \"Fogaça\", \"Nunes\", \"Santos\", \"Leão\", \"Correia\", \"Albuquerque\", \"Sousa\", \"Pacheco\", \"Lopes\", \"Borges\", \"Pinto\", \"Carvalho\", \"Teixeira\", \"Monteiro\", \"Gonçalves\", \"Ribeiro\", \"Cunha\", \"Machado\", \"Martins\", \"Almeida\", \"Gomes\", \"Nascimento\", \"Rocha\", \"Dias\", \"Oliveira\", \"Barbosa\", \"Silva\", \"Rodrigues\", \"Ferreira\", \"Santos\", \"Pinto\", \"Vieira\", \"Correia\", \"Mendes\", \"Cavalcanti\", \"Costa\", \"Lima\", \"Barbosa\", \"Moraes\", \"Araújo\", \"Gonçalves\", \"Sant\"];\r",
											"\r",
											"let randomItem = lastName[Math.floor(Math.random()*lastName.length)];\r",
											"\r",
											"return randomItem\r",
											"}\r",
											"pm.environment.set(\"LastName\",lastName());\r",
											"\r",
											"pm.environment.set(\"FullName\",pm.environment.get(\"FirstName\")+\" \"+pm.environment.get(\"LastName\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"function generateCPF() {\r",
											"  let num = Math.floor(Math.random() * 999999999);\r",
											"  let cpf = num.toString().padStart(9, '0');\r",
											"  cpf += calcularDigito(cpf);\r",
											"  cpf += calcularDigito(cpf);\r",
											"\r",
											"return cpf;\r",
											"}\r",
											"\r",
											"function calcularDigito(cpf) {\r",
											"  let soma = 0;\r",
											"  for (let i = 0; i < cpf.length; i++) {\r",
											"      soma += parseInt(cpf[i]) * ((cpf.length + 1)-i)\r",
											"    }\r",
											"let resto = (soma * 10) % 11\r",
											"return (resto > 9)? '0': resto.toString();\r",
											"}\r",
											"\r",
											"pm.environment.set(\"CPF\", generateCPF());\r",
											"\r",
											"\r",
											"function acessProfile() {\r",
											"\r",
											"let acessProfile =[ \"ADMIN\", \"ADMIN\",\"ADMIN\",\"ADMIN\"];\r",
											"\r",
											"let randomItem = acessProfile[Math.floor(Math.random()*acessProfile.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"AcessProfile\",acessProfile());\r",
											"\r",
											"function providerMail() {\r",
											"\r",
											"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
											"\r",
											"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
											"return randomItem\r",
											"\r",
											"}\r",
											"pm.environment.set(\"ProviderMail\",providerMail());\r",
											"\r",
											"\r",
											"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
											"     \r",
											"// Função para verificar se uma senha atende aos critérios\r",
											"function isPasswordValid(password) {\r",
											"    // Verifica se a senha tem pelo menos 8 caracteres e no máximo 16\r",
											"    if (password.length < 8 || password.length > 16) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos uma letra maiúscula, uma letra minúscula e um número\r",
											"    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/\\d/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    // Verifica se a senha contém pelo menos um caractere especial\r",
											"    if (!/[@#$%]/.test(password)) {\r",
											"        return false;\r",
											"    }\r",
											"    \r",
											"    return true;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"function generateRandomPassword() {\r",
											"    const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%\";\r",
											"    let password = \"\";\r",
											"    for (let i = 0; i < 12; i++) {\r",
											"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return password;\r",
											"}\r",
											"\r",
											"// Gera uma senha randômica que atende aos critérios\r",
											"let password;\r",
											"do {\r",
											"    password = generateRandomPassword();\r",
											"} while (!isPasswordValid(password));\r",
											"\r",
											"// Define a senha gerada como variável de ambiente para uso na solicitação\r",
											"pm.environment.set(\"RandomPassword\", password);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{tokenQA}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{AcessProfile}}\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"user",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "COMPANY",
			"item": [
				{
					"name": "Cadastro Qa Coders Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Olá Qa-Coders-SYSADMIN, autenticação autorizada com sucesso\"\r",
									"    , function (){\r",
									"pm.globals.set(\"msg \", JSON.parse(responseBody).msg);   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://chips.qacoders-academy.com.br/api/login/",
							"protocol": "https",
							"host": [
								"chips",
								"qacoders-academy",
								"com",
								"br"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Loggin User com  Sucesso Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check Token is True\", function (){\r",
									"    pm.expect(JSON.parse(responseBody).token).exist\r",
									"    pm.test(\"Olá Qa-Coders-SYSADMIN, autenticação autorizada com sucesso!\")\r",
									"});\r",
									"pm.environment.set(\"tokenUsers\", pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"pm.globals.set(\"msga\",JSON.parse(responseBody).msg)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenQA}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "listagem das empresas com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Converter a string JSON para um objeto JavaScript",
									"var data = pm.response.json();",
									" ",
									"// Gerar um número aleatório entre 0 e o comprimento da lista de objetos - 1",
									"var randomIndex = Math.floor(Math.random() * data.length);",
									" ",
									"// Obter o _id do objeto selecionado aleatoriamente",
									"var randomId = data[randomIndex]._id;",
									" ",
									"// Armazenar o _id em uma variável de ambiente",
									"pm.environment.set(\"randomId\", randomId);",
									" ",
									"console.log(\"Random ID:\", randomId);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de empresa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function companyName() {\r",
									"    // Nomes das empresas\r",
									"    let companyNames = [\r",
									"        \"SolarisTech Solutions\", \"Aquamarine Innovations\", \"Skyline Enterprises\", \"TerraNova Technologies\",\r",
									"        \"Apex Dynamics Inc.\", \"Horizon Ventures\", \"Stellar Services Group\", \"BlueWave Industries\",\r",
									"        \"EcoSolutions Corp.\", \"Nexus Innovations\", \"FusionTech Enterprises\", \"AlphaOmega Systems\",\r",
									"        \"GlobalGrowth Partners\", \"Summit Solutions Ltd.\", \"SilverStone Technologies\", \"GreenLeaf Industries\",\r",
									"        \"Quantum Dynamics Inc.\", \"Redwood Ventures\", \"Oceanic Innovations\", \"Firefly Enterprises\",\r",
									"        \"Sunbeam Solutions\", \"Cascade Industries\", \"BrightPath Technologies\", \"EarthGuard Solutions\",\r",
									"        \"AlphaCentauri Group\", \"Neptune Enterprises\", \"Zenith Innovations\", \"Titan Ventures Inc.\",\r",
									"        \"Evergreen Technologies\", \"Phoenix Rising Enterprises\"\r",
									"    ];\r",
									"\r",
									"    // Seleciona um nome aleatório das empresas\r",
									"    let randomItem = companyNames[Math.floor(Math.random() * companyNames.length)];\r",
									"    return randomItem;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"CompanyName\", companyName());\r",
									"\r",
									"function providerCompany() {\r",
									"    // Tipos de empresa\r",
									"    let providerCompany = [\"Ltda\", \"S.A.\", \"EIRELI\", \"ME\", \"EPP\", \"Sociedade em Nome Coletivo\", \"Sociedade em Comandita Simples\", \"Cooperativa\", \"Empresa Individual\", \"SLU\"];\r",
									"\r",
									"    // Seleciona um tipo de empresa aleatório\r",
									"    let randomItem = providerCompany[Math.floor(Math.random() * providerCompany.length)];\r",
									"    return randomItem;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"ProviderCompany\", providerCompany());\r",
									"\r",
									"// Define o nome completo da empresa\r",
									"pm.environment.set(\"FullCompanyName\", pm.environment.get(\"CompanyName\") + \" \" + pm.environment.get(\"ProviderCompany\"));\r",
									"\r",
									"function providerMail() {\r",
									"\r",
									"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
									"\r",
									"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
									"return randomItem\r",
									"\r",
									"}\r",
									"pm.environment.set(\"ProviderMail\",providerMail());\r",
									"\r",
									"\r",
									"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
									"\r",
									"\r",
									"// Função para gerar um CNPJ fictício\r",
									"function generateCNPJ() {\r",
									"  let cnpj = '';\r",
									"  for (let i = 0; i < 14; i++) {\r",
									"    cnpj += Math.floor(Math.random() * 10); // Gerar número aleatório de 0 a 9\r",
									"  }\r",
									"  return cnpj;\r",
									"}\r",
									"\r",
									"// Função para calcular dígito verificador do CNPJ\r",
									"function calcularDigito(cnpj) {\r",
									"  let soma = 0;\r",
									"  for (let i = 0; i < cnpj.length; i++) {\r",
									"    soma += parseInt(cnpj[i]) * ((cnpj.length + 1) - i);\r",
									"  }\r",
									"  let resto = (soma * 10) % 11;\r",
									"  return (resto > 9) ? '0' : resto.toString();\r",
									"}\r",
									"\r",
									"// Gerar CNPJ e salvar como variável de ambiente\r",
									"let cnpjGerado = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpjGerado);\r",
									"\r",
									"// Função para gerar um número aleatório entre min e max\r",
									"function getRandomNumber(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Função para gerar um número aleatório de 14 dígitos\r",
									"function generateRandomNumber() {\r",
									"    let randomNumber = \"\";\r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"// Gerar um número aleatório de 14 dígitos\r",
									"const randomPhoneNumber = generateRandomNumber();\r",
									"\r",
									"// Salvar o número aleatório como variável de ambiente\r",
									"pm.environment.set(\"TEL\", randomPhoneNumber);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"function providerDescr() {\r",
									"\r",
									"let providerDescr =[\"focada em Tecnologias\", \"Prestadora de Consultoria Financeira\",\" Especializada em Liçitações\",\" focada em Facilities\",];\r",
									"\r",
									"let randomItem = providerDescr[Math.floor(Math.random() * providerDescr.length)];\r",
									"return randomItem\r",
									"\r",
									"}\r",
									"pm.environment.set(\"providerDescr\",providerDescr());\r",
									"\r",
									"\r",
									"pm.environment.set(\"Descri\",pm.environment.get(\"FullCompanyName\")+\"_\"+pm.environment.get(\"providerDescr\"))\r",
									"\r",
									"// Função para gerar um número aleatório entre min e max\r",
									"function getRandomNumber(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Função para gerar um número aleatório entre min e max\r",
									"function getRandomNumber(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Lista de estados brasileiros com suas siglas e capitais\r",
									"const brazilianCapitals = {\r",
									"    \"AC\": \"Rio Branco\",\r",
									"    \"AL\": \"Maceió\",\r",
									"    \"AP\": \"Macapá\",\r",
									"    \"AM\": \"Manaus\",\r",
									"    \"BA\": \"Salvador\",\r",
									"    \"CE\": \"Fortaleza\",\r",
									"    \"DF\": \"Brasília\",\r",
									"    \"ES\": \"Vitória\",\r",
									"    \"GO\": \"Goiânia\",\r",
									"    \"MA\": \"São Luís\",\r",
									"    \"MT\": \"Cuiabá\",\r",
									"    \"MS\": \"Campo Grande\",\r",
									"    \"MG\": \"Belo Horizonte\",\r",
									"    \"PA\": \"Belém\",\r",
									"    \"PB\": \"João Pessoa\",\r",
									"    \"PR\": \"Curitiba\",\r",
									"    \"PE\": \"Recife\",\r",
									"    \"PI\": \"Teresina\",\r",
									"    \"RJ\": \"Rio de Janeiro\",\r",
									"    \"RN\": \"Natal\",\r",
									"    \"RS\": \"Porto Alegre\",\r",
									"    \"RO\": \"Porto Velho\",\r",
									"    \"RR\": \"Boa Vista\",\r",
									"    \"SC\": \"Florianópolis\",\r",
									"    \"SP\": \"São Paulo\",\r",
									"    \"SE\": \"Aracaju\",\r",
									"    \"TO\": \"Palmas\"\r",
									"};\r",
									"\r",
									"// Lista de nomes de ruas\r",
									"const streetNames = [\r",
									"    \"Rua das Flores\",\r",
									"    \"Avenida Interlagos\",\r",
									"    \"Rua dos Ipês\",\r",
									"    \"Travessa dos Girassóis\",\r",
									"    \"Alameda das Acácias\"\r",
									"];\r",
									"\r",
									"// Gerar valores aleatórios\r",
									"const zipCode = Math.floor(Math.random() * 99999999).toString().padStart(8, \"0\");\r",
									"const randomState = Object.keys(brazilianCapitals)[Math.floor(Math.random() * Object.keys(brazilianCapitals).length)];\r",
									"const city = brazilianCapitals[randomState];\r",
									"const state = randomState;\r",
									"const district = \"Bairro \" + Object.values(brazilianCapitals)[Math.floor(Math.random() * Object.values(brazilianCapitals).length)];\r",
									"const street = streetNames[Math.floor(Math.random() * streetNames.length)];\r",
									"const number = getRandomNumber(1, 130);\r",
									"const complement = \"de \" + getRandomNumber(1, 4503) + \" ao fim - lado ímpar\";\r",
									"const country = \"Brasil\";\r",
									"\r",
									"// Salvar valores em variáveis de ambiente\r",
									"pm.environment.set(\"ZipCode\", zipCode);\r",
									"pm.environment.set(\"City\", city);\r",
									"pm.environment.set(\"State\", state);\r",
									"pm.environment.set(\"District\", district);\r",
									"pm.environment.set(\"Street\", street);\r",
									"pm.environment.set(\"Number\", number);\r",
									"pm.environment.set(\"Complement\", complement);\r",
									"pm.environment.set(\"Country\", country);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.environment.set(\"userId\", JSON.parse(responseBody).newCompany._id);\r",
									" \r",
									" \r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"url\")}/api/company/${pm.environment.get(\"userId\")}`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        \"Authorization\": `${pm.environment.get(\"tokenUsers\")}`\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    try {\r",
									"        pm.expect(response.json()).exist;\r",
									"        testResult = true;\r",
									"    } catch(error) {\r",
									"        testResult = false;\r",
									"        pm.test(\"Create user\", function () {\r",
									"            pm.expect(true).to.eql(testResult);\r",
									"        });\r",
									"    }\r",
									"               \r",
									"    if (testResult !== false) {\r",
									"        pm.test(\"User created and saved in the database.\", function () {\r",
									"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
									"        });\r",
									"        pm.test(\"Status CompanyName is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"CompanyName\")).to.eql(response.json().corporateName);\r",
									"        });\r",
									"        pm.test(\"Status email is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"Mail\")).to.eql(response.json().mail);\r",
									"        });\r",
									"        pm.test(\"Status cnpj is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"cnpj\")).to.eql(response.json().registerCompany);\r",
									"        });\r",
									"        pm.test(\"Status code is 201\", function () {\r",
									"            pm.response.to.have.status(201);\r",
									"        });\r",
									" \r",
									"       \r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"matriz\": \"{{FullCompanyName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"{{TEL}}\",\r\n  \"serviceDescription\": \"{{Descri}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{ZipCode}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Contagem das empresas com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect()\r",
									"});\r",
									"pm.test(\"Contagem efetuada\")\r",
									"    , function (){\r",
									"pm.globals.set(\"count\", JSON.parse(responseBody).count);   \r",
									"};\r",
									"\r",
									"\r",
									"\r",
									"/* Converter a string JSON para um objeto JavaScript\r",
									"var data = pm.response.json();\r",
									" \r",
									"// Gerar um número aleatório entre 0 e o comprimento da lista de objetos - 1\r",
									"var randomIndex = Math.floor(Math.random() * data.length);\r",
									" \r",
									"// Obter o _id do objeto selecionado aleatoriamente\r",
									"var randomId = data[randomIndex]._id;\r",
									" \r",
									"// Armazenar o _id em uma variável de ambiente\r",
									"pm.environment.set(\"randomId\", randomId);\r",
									" \r",
									"console.log(\"Random ID:\", randomId);*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/company/count",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mostrar Empresa com sucesso por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"userId e verdadeiro\"),function(){\r",
									"      \r",
									"pm.globals.set(\"user\", JSON.parse(responseBody)._id);   \r",
									"};\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/company/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "atualizar dados  de uma empresa por id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check msg :Companhia atualizada com sucesso.\", function (){\r",
									"    pm.expect(JSON.parse(responseBody).msg)\r",
									"    pm.test(\"Companhia atualizada com sucesso.\")\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se a mensagem no corpo da resposta é correta\", function () {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"matriz\": \"{{FullCompanyName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"{{TEL}}\",\r\n  \"serviceDescription\": \"{{Descri}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "atualizar  endereço por id com sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Teste de igualdade para verificar se a mensagem está correta\r",
									"pm.test(\"Verifica se a mensagem no corpo da resposta é correta\", function () {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/address/{{randomId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de empresa Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function companyName() {\r",
									"    // Nomes das empresas\r",
									"    let companyNames = [\r",
									"        \"SolarisTech Solutions\", \"Aquamarine Innovations\", \"Skyline Enterprises\", \"TerraNova Technologies\",\r",
									"        \"Apex Dynamics Inc.\", \"Horizon Ventures\", \"Stellar Services Group\", \"BlueWave Industries\",\r",
									"        \"EcoSolutions Corp.\", \"Nexus Innovations\", \"FusionTech Enterprises\", \"AlphaOmega Systems\",\r",
									"        \"GlobalGrowth Partners\", \"Summit Solutions Ltd.\", \"SilverStone Technologies\", \"GreenLeaf Industries\",\r",
									"        \"Quantum Dynamics Inc.\", \"Redwood Ventures\", \"Oceanic Innovations\", \"Firefly Enterprises\",\r",
									"        \"Sunbeam Solutions\", \"Cascade Industries\", \"BrightPath Technologies\", \"EarthGuard Solutions\",\r",
									"        \"AlphaCentauri Group\", \"Neptune Enterprises\", \"Zenith Innovations\", \"Titan Ventures Inc.\",\r",
									"        \"Evergreen Technologies\", \"Phoenix Rising Enterprises\"\r",
									"    ];\r",
									"\r",
									"    // Seleciona um nome aleatório das empresas\r",
									"    let randomItem = companyNames[Math.floor(Math.random() * companyNames.length)];\r",
									"    return randomItem;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"CompanyName\", companyName());\r",
									"\r",
									"function providerCompany() {\r",
									"    // Tipos de empresa\r",
									"    let providerCompany = [\"Ltda\", \"S.A.\", \"EIRELI\", \"ME\", \"EPP\", \"Sociedade em Nome Coletivo\", \"Sociedade em Comandita Simples\", \"Cooperativa\", \"Empresa Individual\", \"SLU\"];\r",
									"\r",
									"    // Seleciona um tipo de empresa aleatório\r",
									"    let randomItem = providerCompany[Math.floor(Math.random() * providerCompany.length)];\r",
									"    return randomItem;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"ProviderCompany\", providerCompany());\r",
									"\r",
									"// Define o nome completo da empresa\r",
									"pm.environment.set(\"FullCompanyName\", pm.environment.get(\"CompanyName\") + \" \" + pm.environment.get(\"ProviderCompany\"));\r",
									"\r",
									"function providerMail() {\r",
									"\r",
									"let providerMail =[\"@yahoo.com.br\", \"@gmail.com\",\"@outlook.com\",\"@hotmail.com\",\"@uol.com.br\"];\r",
									"\r",
									"let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
									"return randomItem\r",
									"\r",
									"}\r",
									"pm.environment.set(\"ProviderMail\",providerMail());\r",
									"\r",
									"\r",
									"pm.environment.set(\"Mail\",pm.environment.get(\"FirstName\")+\"_\"+ pm.variables.replaceIn('{{$guid}}')+pm.environment.get(\"ProviderMail\"))\r",
									"\r",
									"\r",
									"// Função para gerar um CNPJ fictício\r",
									"function generateCNPJ() {\r",
									"  let cnpj = '';\r",
									"  for (let i = 0; i < 14; i++) {\r",
									"    cnpj += Math.floor(Math.random() * 10); // Gerar número aleatório de 0 a 9\r",
									"  }\r",
									"  return cnpj;\r",
									"}\r",
									"\r",
									"// Função para calcular dígito verificador do CNPJ\r",
									"function calcularDigito(cnpj) {\r",
									"  let soma = 0;\r",
									"  for (let i = 0; i < cnpj.length; i++) {\r",
									"    soma += parseInt(cnpj[i]) * ((cnpj.length + 1) - i);\r",
									"  }\r",
									"  let resto = (soma * 10) % 11;\r",
									"  return (resto > 9) ? '0' : resto.toString();\r",
									"}\r",
									"\r",
									"// Gerar CNPJ e salvar como variável de ambiente\r",
									"let cnpjGerado = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpjGerado);\r",
									"\r",
									"// Função para gerar um número aleatório entre min e max\r",
									"function getRandomNumber(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Função para gerar um número aleatório de 14 dígitos\r",
									"function generateRandomNumber() {\r",
									"    let randomNumber = \"\";\r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"// Gerar um número aleatório de 14 dígitos\r",
									"const randomPhoneNumber = generateRandomNumber();\r",
									"\r",
									"// Salvar o número aleatório como variável de ambiente\r",
									"pm.environment.set(\"TEL\", randomPhoneNumber);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"function providerDescr() {\r",
									"\r",
									"let providerDescr =[\"focada em Tecnologias\", \"Prestadora de Consultoria Financeira\",\" Especializada em Liçitações\",\" focada em Facilities\",];\r",
									"\r",
									"let randomItem = providerDescr[Math.floor(Math.random() * providerDescr.length)];\r",
									"return randomItem\r",
									"\r",
									"}\r",
									"pm.environment.set(\"providerDescr\",providerDescr());\r",
									"\r",
									"\r",
									"pm.environment.set(\"Descri\",pm.environment.get(\"FullCompanyName\")+\"_\"+pm.environment.get(\"providerDescr\"))\r",
									"\r",
									"// Função para gerar um número aleatório entre min e max\r",
									"function getRandomNumber(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Função para gerar um número aleatório entre min e max\r",
									"function getRandomNumber(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Lista de estados brasileiros com suas siglas e capitais\r",
									"const brazilianCapitals = {\r",
									"    \"AC\": \"Rio Branco\",\r",
									"    \"AL\": \"Maceió\",\r",
									"    \"AP\": \"Macapá\",\r",
									"    \"AM\": \"Manaus\",\r",
									"    \"BA\": \"Salvador\",\r",
									"    \"CE\": \"Fortaleza\",\r",
									"    \"DF\": \"Brasília\",\r",
									"    \"ES\": \"Vitória\",\r",
									"    \"GO\": \"Goiânia\",\r",
									"    \"MA\": \"São Luís\",\r",
									"    \"MT\": \"Cuiabá\",\r",
									"    \"MS\": \"Campo Grande\",\r",
									"    \"MG\": \"Belo Horizonte\",\r",
									"    \"PA\": \"Belém\",\r",
									"    \"PB\": \"João Pessoa\",\r",
									"    \"PR\": \"Curitiba\",\r",
									"    \"PE\": \"Recife\",\r",
									"    \"PI\": \"Teresina\",\r",
									"    \"RJ\": \"Rio de Janeiro\",\r",
									"    \"RN\": \"Natal\",\r",
									"    \"RS\": \"Porto Alegre\",\r",
									"    \"RO\": \"Porto Velho\",\r",
									"    \"RR\": \"Boa Vista\",\r",
									"    \"SC\": \"Florianópolis\",\r",
									"    \"SP\": \"São Paulo\",\r",
									"    \"SE\": \"Aracaju\",\r",
									"    \"TO\": \"Palmas\"\r",
									"};\r",
									"\r",
									"// Lista de nomes de ruas\r",
									"const streetNames = [\r",
									"    \"Rua das Flores\",\r",
									"    \"Avenida Interlagos\",\r",
									"    \"Rua dos Ipês\",\r",
									"    \"Travessa dos Girassóis\",\r",
									"    \"Alameda das Acácias\"\r",
									"];\r",
									"\r",
									"// Gerar valores aleatórios\r",
									"const zipCode = Math.floor(Math.random() * 99999999).toString().padStart(8, \"0\");\r",
									"const randomState = Object.keys(brazilianCapitals)[Math.floor(Math.random() * Object.keys(brazilianCapitals).length)];\r",
									"const city = brazilianCapitals[randomState];\r",
									"const state = randomState;\r",
									"const district = \"Bairro \" + Object.values(brazilianCapitals)[Math.floor(Math.random() * Object.values(brazilianCapitals).length)];\r",
									"const street = streetNames[Math.floor(Math.random() * streetNames.length)];\r",
									"const number = getRandomNumber(1, 130);\r",
									"const complement = \"de \" + getRandomNumber(1, 4503) + \" ao fim - lado ímpar\";\r",
									"const country = \"Brasil\";\r",
									"\r",
									"// Salvar valores em variáveis de ambiente\r",
									"pm.environment.set(\"ZipCode\", zipCode);\r",
									"pm.environment.set(\"City\", city);\r",
									"pm.environment.set(\"State\", state);\r",
									"pm.environment.set(\"District\", district);\r",
									"pm.environment.set(\"Street\", street);\r",
									"pm.environment.set(\"Number\", number);\r",
									"pm.environment.set(\"Complement\", complement);\r",
									"pm.environment.set(\"Country\", country);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.environment.set(\"randomId\", JSON.parse(responseBody).newCompany._id);\r",
									" \r",
									" \r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get(\"url\")}/api/company/${pm.environment.get(\"randomId\")}`,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        \"Authorization\": `${pm.environment.get(\"tokenUsers\")}`\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    try {\r",
									"        pm.expect(response.json()).exist;\r",
									"        testResult = true;\r",
									"    } catch(error) {\r",
									"        testResult = false;\r",
									"        pm.test(\"Create user\", function () {\r",
									"            pm.expect(true).to.eql(testResult);\r",
									"        });\r",
									"    }\r",
									"     if (testResult !== false) {\r",
									"        pm.test(\"User created and saved in the database.\", function () {\r",
									"            pm.expect(pm.environment.get(\"randomId\")).to.eql(response.json()._id);\r",
									"        });\r",
									"        pm.test(\"Status CompanyName is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"CompanyName\")).to.eql(response.json().corporateName);\r",
									"        });\r",
									"        pm.test(\"Status email is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"Mail\")).to.eql(response.json().mail);\r",
									"        });\r",
									"        pm.test(\"Status cnpj is true\", function () {\r",
									"            pm.expect(pm.environment.get(\"cnpj\")).to.eql(response.json().registerCompany);\r",
									"        });\r",
									"        pm.test(\"Status code is 201\", function () {\r",
									"            pm.response.to.have.status(201);\r",
									"        });\r",
									" \r",
									"       \r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{CompanyName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"matriz\": \"{{FullCompanyName}}\",\r\n  \"responsibleContact\": \"{{FullName}}\",\r\n  \"telephone\": \"{{TEL}}\",\r\n  \"serviceDescription\": \"{{Descri}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{ZipCode}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "atualizar  endereço por id com sucesso Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verifica se a mensagem no corpo da resposta é correta\", function () {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"Companhia deletado com sucesso.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/{{randomId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"{{randomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "atualizar o endereço de uma empresa passando o id.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Verifica se a mensagem no corpo da resposta é correta\", function () {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{ZipCode}}\",\r\n      \"city\": \"{{City}}\",\r\n      \"state\": \"{{State}}\",\r\n      \"district\": \"{{District}}\",\r\n      \"street\": \"{{Street}}\",\r\n      \"number\": \"{{Number}}\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"{{Country}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/address/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "atualizar o status de uma empresa passando o id.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check se a mensagem no corpo esta correta\"), function(){\r",
									"    pm.expect(pm.response.json().msg.have.to.eql(\"Status da companhia atualizado com sucesso.\"))\r",
									"}\r",
									"\r",
									"pm.test(\"Verifique se Status foi modificado\"), function(){\r",
									"    pm.expect(pm.response.json().status).to.have.eql(\"true\")\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/status/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								"status",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}